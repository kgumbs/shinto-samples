"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Shinto = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_codebuild_1 = require("aws-cdk-lib/aws-codebuild");
const aws_codestarnotifications_1 = require("aws-cdk-lib/aws-codestarnotifications");
const aws_ec2_1 = require("aws-cdk-lib/aws-ec2");
const aws_ecr_1 = require("aws-cdk-lib/aws-ecr");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const aws_sns_1 = require("aws-cdk-lib/aws-sns");
const aws_sns_subscriptions_1 = require("aws-cdk-lib/aws-sns-subscriptions");
const pipelines = require("aws-cdk-lib/pipelines");
const codebuild_helper_1 = require("./codebuild-helper");
const constants_1 = require("./constants");
const stage_1 = require("./stage");
const types_1 = require("./types");
const utils_1 = require("./utils");
/**
 *
 * @class
 * @description - Continuous Integration Pipeline
 *
*/
class Shinto {
    /**
     *
     * @param props - application properties
     *
     */
    constructor(props) {
        /**
           *
           * config = {
           *  vpcId: Vpc Id, default=controlhub vpc id
           *  repository: CDK pipeline repository, default=awscloud-devsecops-codepipeline
           *  computeType: Build machine compute type, default=medium
           *  imageTag: ECR image tag, default=latest
           *  subnetType: type of Subnet, default=PRIVATE_WITH_NAT
           *  synth: {
           *    selfMutation: self-mutation feature, default=true
           *    crossAccountKeys: deploy to other regions / accounts, default=true
           *  }
           * }
           *
          */
        this._config = {
            vpcId: constants_1.ShintoConstants.CONFIG_VPCID,
            subnetType: constants_1.ShintoConstants.CONFIG_SUBNET_TYPE,
            image: {
                repository: constants_1.ShintoConstants.CONFIG_IMAGE_REPOSITORY,
                tagOrDigest: constants_1.ShintoConstants.CONFIG_IMAGE_TAG,
            },
            computeType: constants_1.ShintoConstants.CONFIG_COMPUTE_TYPE,
            synth: {
                selfMutation: constants_1.ShintoConstants.CONFIG_SELF_MUTATION,
                crossAccountKeys: constants_1.ShintoConstants.CONFIG_CROSS_ACCOUNT_KEYS,
            },
        };
        /**
         *
         * props = {
         *  metadata -  additional spec to overide application/configuratiuon attributes.
         *  tags - AWS Account level tags
         *  github = {
         *    connectionId: AWS CodeStar Connection Id, default=ca0edb72-987c-4291-a161-460392e4c886
         *    triggerOnPush: start pipeline based on new commit, default=true
         *    codeBuildCloneOutput: perform full git clone, default=true
         *  }
         * }
         *
         */
        this._props = {
            ...props,
            metadata: {
                ...props.metadata,
                PIPELINE_WORKSPACE: props.metadata?.PIPELINE_WORKSPACE || constants_1.ShintoConstants.DEFAULT_DIR,
                PROJECT_WORKSPACE: props.metadata?.PROJECT_WORKSPACE || constants_1.ShintoConstants.DEFAULT_DIR,
            },
            label: {
                ...props.label,
                environment: props.label.environment || types_1.EnvironmentType.DEV,
            },
            notification: {
                ...props.notification,
                developers: utils_1.PipelineUtils.propertyOrDefault(props.notification?.developers, []),
                pipelineEvents: utils_1.PipelineUtils.propertyOrDefault(props.notification?.pipelineEvents, constants_1.ShintoConstants.TRUE),
                stageEvents: utils_1.PipelineUtils.propertyOrDefault(props.notification?.stageEvents, constants_1.ShintoConstants.FALSE),
            },
            git: {
                ...props.git,
                triggerOnPush: utils_1.PipelineUtils.propertyOrDefault(props.git.triggerOnPush, constants_1.ShintoConstants.TRUE),
                codeBuildCloneOutput: utils_1.PipelineUtils.propertyOrDefault(props.git.codeBuildCloneOutput, constants_1.ShintoConstants.TRUE),
            },
            buildSpec: {
                ...props.buildSpec,
                type: utils_1.PipelineUtils.propertyOrDefault(props.buildSpec.type, constants_1.ShintoConstants.DEFAULT_BUILD_TYPE),
            },
        };
        this._app = new aws_cdk_lib_1.App();
        this._stack = new aws_cdk_lib_1.Stack(this._app, `${this._props.label.customer}-${this._props.label.project}-ci-pipeline`.toLowerCase(), {
            env: {
                region: props.controlHub.region || constants_1.ShintoConstants.DEFAULT_REGION,
                account: props.controlHub.account,
            },
        });
        for (const [key, value] of Object.entries(this._props.label)) {
            this.addTag(this._stack, `${key}`.toLowerCase(), `${value}`.toLowerCase());
        }
    }
    /**
     *
     * Provision CDK Pipeline
     *
    */
    stack() {
        const vpc = aws_ec2_1.Vpc.fromLookup(this._stack, 'VPCLookup', { vpcId: this._props.metadata?.CONTROLHUB_VPCID || this._config.vpcId });
        const role = new aws_iam_1.Role(this._stack, `${this._props.label.customer}-${this._props.label.project}-role`.toLowerCase(), {
            roleName: `${this._props.label.customer}-${this._props.label.project}-role`,
            assumedBy: new aws_iam_1.CompositePrincipal(new aws_iam_1.ServicePrincipal('codepipeline.amazonaws.com'), new aws_iam_1.ServicePrincipal('codebuild.amazonaws.com')),
        });
        for (let policy of constants_1.ShintoConstants.CONFIG_MANAGED_POLICY) {
            role.addManagedPolicy(aws_iam_1.ManagedPolicy.fromAwsManagedPolicyName(policy));
        }
        role.addToPrincipalPolicy(new aws_iam_1.PolicyStatement({
            actions: [
                'sts:AssumeRole',
            ],
            resources: ['arn:aws:iam::*:role/cdk-*'],
            effect: aws_iam_1.Effect.ALLOW,
        }));
        role.addToPrincipalPolicy(new aws_iam_1.PolicyStatement({
            actions: [
                'secretsmanager:GetSecretValue',
                'secretsmanager:DescribeSecret',
                'secretsmanager:ListSecrets',
                'secretsmanager:ListSecretVersionIds',
                'secretsmanager:GetResourcePolicy',
            ],
            resources: ['*'],
            effect: aws_iam_1.Effect.ALLOW,
        }));
        const input_source = pipelines.CodePipelineSource.connection(`${this._props.git.owner}/${this._props.git.repository}`, `${this._props.git.branch}`, {
            triggerOnPush: this._props.git.triggerOnPush,
            codeBuildCloneOutput: this._props.git.codeBuildCloneOutput,
            connectionArn: `arn:aws:codestar-connections:${aws_cdk_lib_1.Stack.of(this._stack).region}:${aws_cdk_lib_1.Stack.of(this._stack).account}:connection/${this._props.git.codeStarId}`,
        });
        const security_group = new aws_ec2_1.SecurityGroup(this._stack, 'SecurityGroup', {
            vpc: vpc,
            allowAllOutbound: true,
            securityGroupName: `${this._props.label.customer}-${this._props.label.project}-securitygroup`.toLowerCase(),
            description: `${this._props.label.customer}-${this._props.label.project}-securitygroup`.toLowerCase(),
        });
        security_group.addIngressRule(aws_ec2_1.Peer.ipv4(vpc.vpcCidrBlock), aws_ec2_1.Port.tcp(443));
        const notification_topic = new aws_sns_1.Topic(this._stack, 'NotificationTopic', {
            topicName: `${this._props.label.customer}-${this._props.label.project}-notification-topic`.toLowerCase(),
        });
        for (let email of this._props.notification?.developers || []) {
            notification_topic.addSubscription(new aws_sns_subscriptions_1.EmailSubscription(email));
        }
        notification_topic.grantPublish(role);
        let primary_output = `${this._props.metadata?.PIPELINE_WORKSPACE || constants_1.ShintoConstants.DEFAULT_DIR}`;
        let isPluggableEnabled = this._props.metadata?.PLUGGABLE_ENABLED || String(constants_1.ShintoConstants.TRUE);
        if (JSON.parse(isPluggableEnabled)) {
            primary_output = `${primary_output}/${this._props.metadata?.PLUGGABLE_WORKSPACE || constants_1.ShintoConstants.DEFAULT_PLUGGABLE_WORKSPACE}`;
        }
        primary_output = primary_output.concat('/cdk.out').replace('//', '/');
        let codeBuildStepProps = this.init(vpc, role, input_source, security_group);
        let pipeline = new pipelines.CodePipeline(this._stack, 'CodePipeline', {
            pipelineName: `${this._props.label.customer}-${this._props.label.project}-ci-pipeline`.toLowerCase(),
            crossAccountKeys: this._config.synth?.crossAccountKeys,
            selfMutation: this._config.synth?.selfMutation,
            synth: new pipelines.CodeBuildStep('Synth', {
                ...codeBuildStepProps,
                primaryOutputDirectory: primary_output,
                commands: [
                    ...constants_1.ShintoConstants.SYNTH_COMMANDS,
                ],
                installCommands: [
                    `cd ${this._props.metadata?.PIPELINE_WORKSPACE || constants_1.ShintoConstants.DEFAULT_DIR}`,
                    ...constants_1.ShintoConstants.SYNTH_INSTALL_COMMANDS,
                ],
                buildEnvironment: {
                    ...codeBuildStepProps.buildEnvironment,
                    environmentVariables: {
                        ...codeBuildStepProps.buildEnvironment?.environmentVariables,
                        NPM_SCOPE: {
                            type: aws_codebuild_1.BuildEnvironmentVariableType.PARAMETER_STORE,
                            value: constants_1.ShintoConstants.SSM_KEY_NPM_SCOPE,
                        },
                        NPM_TOKEN: {
                            type: aws_codebuild_1.BuildEnvironmentVariableType.PARAMETER_STORE,
                            value: constants_1.ShintoConstants.SSM_KEY_NPM_TOKEN,
                        },
                        NPM_REGISTRY: {
                            type: aws_codebuild_1.BuildEnvironmentVariableType.PARAMETER_STORE,
                            value: constants_1.ShintoConstants.SSM_KEY_NPM_REGISTRY,
                        },
                        PLUGGABLE_BETA: {
                            type: aws_codebuild_1.BuildEnvironmentVariableType.PLAINTEXT,
                            value: this._props.metadata?.PLUGGABLE_BETA || String(constants_1.ShintoConstants.FALSE),
                        },
                        PLUGGABLE_ENABLED: {
                            type: aws_codebuild_1.BuildEnvironmentVariableType.PLAINTEXT,
                            value: this._props.metadata?.PLUGGABLE_ENABLED || String(constants_1.ShintoConstants.TRUE),
                        },
                        PLUGGABLE_WORKSPACE: {
                            type: aws_codebuild_1.BuildEnvironmentVariableType.PLAINTEXT,
                            value: this._props.metadata?.PLUGGABLE_WORKSPACE || constants_1.ShintoConstants.DEFAULT_PLUGGABLE_WORKSPACE,
                        },
                        CUSTOM_INSTALL_SCRIPT: {
                            type: aws_codebuild_1.BuildEnvironmentVariableType.PLAINTEXT,
                            value: this._props.metadata?.SYNTH_INSTALL_SCRIPT || '',
                        },
                        CUSTOM_COMMAND_SCRIPT: {
                            type: aws_codebuild_1.BuildEnvironmentVariableType.PLAINTEXT,
                            value: this._props.metadata?.SYNTH_COMMAND_SCRIPT || '',
                        },
                    },
                },
            }),
        });
        let addToCodeScanStage = [];
        let codeBuildHelper = new codebuild_helper_1.CodeBuildHelper(this._props);
        switch (this._props.buildSpec.type) {
            case types_1.BuildType.JAVA: {
                codeBuildStepProps = {
                    ...codeBuildStepProps,
                    env: {
                        ...codeBuildStepProps.env,
                        BUILD_OUTPUT: this._props.metadata?.BUILD_OUTPUT || 'true',
                        BUILD_OUTPUT_DESTINATION: this._props.metadata?.BUILD_OUTPUT_DESTINATION || 'target',
                    },
                };
                let codeBuildStep = codeBuildHelper.addJavaBuildStep(codeBuildStepProps);
                codeBuildStep.primaryOutputDirectory(`**/${this._props.metadata?.BUILD_OUTPUT_DESTINATION || 'target'}`);
                this.addToBuildStage('BuildStage', pipeline, codeBuildStep);
                codeBuildStepProps = {
                    ...codeBuildStepProps,
                    additionalInputs: {
                        BUILD_OUTPUT: codeBuildStep,
                    },
                };
                addToCodeScanStage = [
                    ...addToCodeScanStage,
                ];
                break;
            }
            case types_1.BuildType.PYTHON: {
                codeBuildStepProps = {
                    ...codeBuildStepProps,
                    env: {
                        ...codeBuildStepProps.env,
                        BUILD_OUTPUT_DESTINATION: this._props.metadata?.BUILD_OUTPUT_DESTINATION || 'dist',
                    },
                };
                let codeBuildStep = codeBuildHelper.addPythonBuildStep(codeBuildStepProps);
                codeBuildStep.primaryOutputDirectory(`**/${this._props.metadata?.BUILD_OUTPUT_DESTINATION || 'dist'}`);
                this.addToBuildStage('BuildStage', pipeline, codeBuildStep);
                addToCodeScanStage = [
                    ...addToCodeScanStage,
                ];
                break;
            }
        }
        if (addToCodeScanStage.length > 0) {
            let codescan_stage = new stage_1.CodeScanStage(this._stack, 'CodeScanStage', {
                ...this._props,
                env: {
                    region: this._props.controlHub.region || constants_1.ShintoConstants.DEFAULT_REGION,
                    account: this._props.controlHub.account,
                },
            });
            pipeline.addStage(codescan_stage, {
                pre: [
                    ...addToCodeScanStage,
                ],
            });
        }
        pipeline.buildPipeline();
        let notificationEvents = [];
        if (this._props.notification?.pipelineEvents || constants_1.ShintoConstants.FALSE) {
            notificationEvents = [
                ...constants_1.ShintoConstants.PIPELINE_NOTIFICATION_EVENTS,
            ];
        }
        if (this._props.notification?.stageEvents || constants_1.ShintoConstants.FALSE) {
            notificationEvents = [
                ...constants_1.ShintoConstants.STAGE_NOTIFICATION_EVENTS,
            ];
        }
        new aws_codestarnotifications_1.NotificationRule(this._stack, 'NotificationRule', {
            enabled: true,
            notificationRuleName: `${this._props.label.customer}-${this._props.label.project}-notification-rule`.toLowerCase(),
            detailType: aws_codestarnotifications_1.DetailType.FULL,
            events: [
                ...notificationEvents,
            ],
            source: pipeline.pipeline,
            targets: [notification_topic],
        });
        return this._stack;
    }
    /**
     *
     * Synthesize CDK Pipeline
     *
    */
    synth() {
        this.stack();
        return this._app.synth();
    }
    /**
     *
     * Add tags
     *
    */
    addTag(scope, key, value) {
        if (value != undefined && value.trim().length > 0) {
            aws_cdk_lib_1.Tags.of(scope).add(key, value);
        }
    }
    /**
     *
     * Add Build Stage
     *
    */
    addToBuildStage(id, pipeline, codeBuildStep) {
        let build = new stage_1.BuildStage(this._stack, id, {
            ...this._props,
            env: {
                region: this._props.controlHub.region || constants_1.ShintoConstants.DEFAULT_REGION,
                account: this._props.controlHub.account,
            },
        });
        pipeline.addStage(build, {
            pre: [codeBuildStep],
        });
    }
    /**
     *
     * Init CodeBuildStepProps
     *
    */
    init(vpc, role, input, securityGroup) {
        const repository = aws_ecr_1.Repository.fromRepositoryName(this._stack, 'Repository', this._config.image?.repository || constants_1.ShintoConstants.CONFIG_IMAGE_REPOSITORY);
        let codeBuildStepProps = {
            vpc: vpc,
            role: role,
            input: input,
            commands: [],
            securityGroups: [securityGroup],
            subnetSelection: vpc.selectSubnets({ subnetType: this._config.subnetType }),
            env: {
                PIPELINE_WORKSPACE: this._props.metadata?.PIPELINE_WORKSPACE || constants_1.ShintoConstants.DEFAULT_DIR,
                PROJECT_WORKSPACE: this._props.metadata?.PROJECT_WORKSPACE || constants_1.ShintoConstants.DEFAULT_DIR,
            },
            buildEnvironment: {
                computeType: this._config.computeType,
                buildImage: aws_codebuild_1.LinuxBuildImage.fromEcrRepository(repository, this._config.image?.tagOrDigest),
                privileged: constants_1.ShintoConstants.FALSE,
                environmentVariables: {
                    DEBUG: {
                        type: aws_codebuild_1.BuildEnvironmentVariableType.PLAINTEXT,
                        value: `${this._props.metadata?.DEBUG || constants_1.ShintoConstants.FALSE}`,
                    },
                },
            },
            rolePolicyStatements: [
                new aws_iam_1.PolicyStatement({
                    actions: ['sts:AssumeRole'],
                    resources: ['*'],
                    conditions: {
                        StringEquals: {
                            'iam:ResourceTag/aws-cdk:bootstrap-role': 'lookup',
                        },
                    },
                }),
            ],
        };
        return codeBuildStepProps;
    }
}
exports.Shinto = Shinto;
_a = JSII_RTTI_SYMBOL_1;
Shinto[_a] = { fqn: "@mrwconsulting/shinto.Shinto", version: "0.0.2" };
//# sourceMappingURL=data:application/json;base64,