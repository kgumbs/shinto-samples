import { Stack, StageProps } from 'aws-cdk-lib';
import { IVpc, SecurityGroup } from 'aws-cdk-lib/aws-ec2';
import { IRole } from 'aws-cdk-lib/aws-iam';
import { CloudAssembly } from 'aws-cdk-lib/cx-api';
import * as pipelines from 'aws-cdk-lib/pipelines';
import { IFileSetProducer } from 'aws-cdk-lib/pipelines';
import { Construct } from 'constructs';
import { BuildProps, ControlHubProps, GitProps, LabelProps, NotificationProps } from './props';
/**
 *
 * @interface
 * @description - CDK Pipeline Configuration Properties
 *
 */
export interface ShintoProps extends StageProps {
    /**
     *
     * @optional - additional spec to overide application/configuratiuon attributes.
     *
     * PIPELINE_WORKSPACE - set directory for pipeline (default: ./)
     * PROJECT_WORKSPACE - set directory for application (default: ./)
     * PLUGGABLE_ENABLED - set to use pluggable workspace (default: true)
     * PLUGGABLE_WORKSPACE - set pluggable workspace (default: .pipeline)
     * PLUGGABLE_BETA - set to use beta version (default: false)
     * PYTEST_DIR - directory containing python unit-tests (default: tests)
     * CONTROLHUB_VPCID - set vpc id
     * SECURITYGROUP_NAME - core security group (default: coresg)
     * DEBUG - enable script debugging (default: false)
     *
     * @example
     *  metadata: {
     *    DEBUG: 'false'
     *  }
     */
    readonly metadata?: {
        [key: string]: string;
    };
    /**
     *
     * @required - AWS Account level tags
     *
    */
    readonly label: LabelProps;
    /**
     *
     * @required - continuous pipeline account
     *
    */
    readonly controlHub: ControlHubProps;
    /**
     *
     * @optional - pipeline notification rule target
     *
    */
    readonly notification?: NotificationProps;
    /**
     *
     * @required - git repository configuration for pipeline
     *
    */
    readonly git: GitProps;
    /**
     *
     * @required - build specification for application
     *
    */
    readonly buildSpec: BuildProps;
}
/**
 *
 * @class
 * @description - Continuous Integration Pipeline
 *
*/
export declare class Shinto {
    private _app;
    private _stack;
    private _props;
    private _config;
    /**
     *
     * @param props - application properties
     *
     */
    constructor(props: ShintoProps);
    /**
     *
     * Provision CDK Pipeline
     *
    */
    stack(): Stack;
    /**
     *
     * Synthesize CDK Pipeline
     *
    */
    synth(): CloudAssembly;
    /**
     *
     * Add tags
     *
    */
    addTag(scope: Construct, key: string, value: string): void;
    /**
     *
     * Add Build Stage
     *
    */
    addToBuildStage(id: string, pipeline: pipelines.CodePipeline, codeBuildStep: pipelines.CodeBuildStep): void;
    /**
     *
     * Init CodeBuildStepProps
     *
    */
    init(vpc: IVpc, role: IRole, input: IFileSetProducer, securityGroup: SecurityGroup): pipelines.CodeBuildStepProps;
}
