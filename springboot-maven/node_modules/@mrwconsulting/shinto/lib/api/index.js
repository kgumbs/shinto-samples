"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShintoManagerApi = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const path = require("path");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_apigateway_1 = require("aws-cdk-lib/aws-apigateway");
const aws_lambda_1 = require("aws-cdk-lib/aws-lambda");
const aws_ssm_1 = require("aws-cdk-lib/aws-ssm");
const constants_1 = require("./constants");
class ShintoManagerApi {
    constructor(props) {
        this._app = new aws_cdk_lib_1.App();
        this._stack = new aws_cdk_lib_1.Stack(this._app, 'shinto-manager-stack'.toLowerCase(), {
            env: {
                region: props.region || constants_1.ShintoManagerConstants.DEFAULT_REGION,
                account: props.account,
            },
        });
        this._api = new aws_apigateway_1.RestApi(this._stack, 'shinto-manager-api');
    }
    stack() {
        const register_function = new aws_lambda_1.DockerImageFunction(this._stack, 'register_function', {
            code: aws_lambda_1.DockerImageCode.fromImageAsset(path.join(__dirname, 'function', 'register')),
        });
        const unregister_function = new aws_lambda_1.DockerImageFunction(this._stack, 'unregister_function', {
            code: aws_lambda_1.DockerImageCode.fromImageAsset(path.join(__dirname, 'function', 'unregister')),
        });
        const register = this._api.root.addResource('register');
        register.addMethod('POST');
        register.addMethod('POST', new aws_apigateway_1.LambdaIntegration(register_function, {}));
        const unregister = this._api.root.addResource('unregister');
        unregister.addMethod('POST');
        unregister.addMethod('POST', new aws_apigateway_1.LambdaIntegration(unregister_function, {}));
        let api_url = new aws_ssm_1.StringParameter(this._stack, 'api_url', {
            parameterName: constants_1.ShintoManagerConstants.API_URL,
            stringValue: this._api.url,
        });
        console.log('API Url: ' + api_url.stringValue);
        return this._stack;
    }
}
exports.ShintoManagerApi = ShintoManagerApi;
_a = JSII_RTTI_SYMBOL_1;
ShintoManagerApi[_a] = { fqn: "@mrwconsulting/shinto.ShintoManagerApi", version: "0.0.2" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYXBpL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsNkJBQTZCO0FBQzdCLDZDQUF5QztBQUN6QywrREFBd0U7QUFDeEUsdURBQThFO0FBQzlFLGlEQUFzRDtBQUN0RCwyQ0FBcUQ7QUFHckQsTUFBYSxnQkFBZ0I7SUFLM0IsWUFBWSxLQUF5QjtRQUNuQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksaUJBQUcsRUFBRSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxtQkFBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsc0JBQXNCLENBQUMsV0FBVyxFQUFFLEVBQUU7WUFDdkUsR0FBRyxFQUFFO2dCQUNILE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTSxJQUFJLGtDQUFzQixDQUFDLGNBQWM7Z0JBQzdELE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTzthQUN2QjtTQUNGLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSx3QkFBTyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsb0JBQW9CLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBRUQsS0FBSztRQUNILE1BQU0saUJBQWlCLEdBQUcsSUFBSSxnQ0FBbUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLG1CQUFtQixFQUFFO1lBQ2xGLElBQUksRUFBRSw0QkFBZSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsVUFBVSxDQUFDLENBQUM7U0FDbkYsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLGdDQUFtQixDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUscUJBQXFCLEVBQUU7WUFDdEYsSUFBSSxFQUFFLDRCQUFlLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLENBQUMsQ0FBQztTQUNyRixDQUFDLENBQUM7UUFFSCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDeEQsUUFBUSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMzQixRQUFRLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxJQUFJLGtDQUFpQixDQUFDLGlCQUFpQixFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDekUsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzVELFVBQVUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0IsVUFBVSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxrQ0FBaUIsQ0FBQyxtQkFBbUIsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRTdFLElBQUksT0FBTyxHQUFHLElBQUkseUJBQWUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRTtZQUN4RCxhQUFhLEVBQUUsa0NBQXNCLENBQUMsT0FBTztZQUM3QyxXQUFXLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHO1NBQzNCLENBQUMsQ0FBQztRQUNILE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUMvQyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQzs7QUFyQ0gsNENBc0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IEFwcCwgU3RhY2sgfSBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgeyBMYW1iZGFJbnRlZ3JhdGlvbiwgUmVzdEFwaSB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1hcGlnYXRld2F5JztcbmltcG9ydCB7IERvY2tlckltYWdlQ29kZSwgRG9ja2VySW1hZ2VGdW5jdGlvbiB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1sYW1iZGEnO1xuaW1wb3J0IHsgU3RyaW5nUGFyYW1ldGVyIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLXNzbSc7XG5pbXBvcnQgeyBTaGludG9NYW5hZ2VyQ29uc3RhbnRzIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgU2hpbnRvTWFuYWdlclByb3BzIH0gZnJvbSAnLi9wcm9wcyc7XG5cbmV4cG9ydCBjbGFzcyBTaGludG9NYW5hZ2VyQXBpIHtcbiAgcHJpdmF0ZSBfYXBwOiBBcHA7XG4gIHByaXZhdGUgX3N0YWNrOiBTdGFjaztcbiAgcHJpdmF0ZSBfYXBpOiBSZXN0QXBpO1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBTaGludG9NYW5hZ2VyUHJvcHMpIHtcbiAgICB0aGlzLl9hcHAgPSBuZXcgQXBwKCk7XG4gICAgdGhpcy5fc3RhY2sgPSBuZXcgU3RhY2sodGhpcy5fYXBwLCAnc2hpbnRvLW1hbmFnZXItc3RhY2snLnRvTG93ZXJDYXNlKCksIHtcbiAgICAgIGVudjoge1xuICAgICAgICByZWdpb246IHByb3BzLnJlZ2lvbiB8fCBTaGludG9NYW5hZ2VyQ29uc3RhbnRzLkRFRkFVTFRfUkVHSU9OLFxuICAgICAgICBhY2NvdW50OiBwcm9wcy5hY2NvdW50LFxuICAgICAgfSxcbiAgICB9KTtcbiAgICB0aGlzLl9hcGkgPSBuZXcgUmVzdEFwaSh0aGlzLl9zdGFjaywgJ3NoaW50by1tYW5hZ2VyLWFwaScpO1xuICB9XG5cbiAgc3RhY2soKTogU3RhY2sge1xuICAgIGNvbnN0IHJlZ2lzdGVyX2Z1bmN0aW9uID0gbmV3IERvY2tlckltYWdlRnVuY3Rpb24odGhpcy5fc3RhY2ssICdyZWdpc3Rlcl9mdW5jdGlvbicsIHtcbiAgICAgIGNvZGU6IERvY2tlckltYWdlQ29kZS5mcm9tSW1hZ2VBc3NldChwYXRoLmpvaW4oX19kaXJuYW1lLCAnZnVuY3Rpb24nLCAncmVnaXN0ZXInKSksXG4gICAgfSk7XG4gICAgY29uc3QgdW5yZWdpc3Rlcl9mdW5jdGlvbiA9IG5ldyBEb2NrZXJJbWFnZUZ1bmN0aW9uKHRoaXMuX3N0YWNrLCAndW5yZWdpc3Rlcl9mdW5jdGlvbicsIHtcbiAgICAgIGNvZGU6IERvY2tlckltYWdlQ29kZS5mcm9tSW1hZ2VBc3NldChwYXRoLmpvaW4oX19kaXJuYW1lLCAnZnVuY3Rpb24nLCAndW5yZWdpc3RlcicpKSxcbiAgICB9KTtcblxuICAgIGNvbnN0IHJlZ2lzdGVyID0gdGhpcy5fYXBpLnJvb3QuYWRkUmVzb3VyY2UoJ3JlZ2lzdGVyJyk7XG4gICAgcmVnaXN0ZXIuYWRkTWV0aG9kKCdQT1NUJyk7XG4gICAgcmVnaXN0ZXIuYWRkTWV0aG9kKCdQT1NUJywgbmV3IExhbWJkYUludGVncmF0aW9uKHJlZ2lzdGVyX2Z1bmN0aW9uLCB7fSkpO1xuICAgIGNvbnN0IHVucmVnaXN0ZXIgPSB0aGlzLl9hcGkucm9vdC5hZGRSZXNvdXJjZSgndW5yZWdpc3RlcicpO1xuICAgIHVucmVnaXN0ZXIuYWRkTWV0aG9kKCdQT1NUJyk7XG4gICAgdW5yZWdpc3Rlci5hZGRNZXRob2QoJ1BPU1QnLCBuZXcgTGFtYmRhSW50ZWdyYXRpb24odW5yZWdpc3Rlcl9mdW5jdGlvbiwge30pKTtcblxuICAgIGxldCBhcGlfdXJsID0gbmV3IFN0cmluZ1BhcmFtZXRlcih0aGlzLl9zdGFjaywgJ2FwaV91cmwnLCB7XG4gICAgICBwYXJhbWV0ZXJOYW1lOiBTaGludG9NYW5hZ2VyQ29uc3RhbnRzLkFQSV9VUkwsXG4gICAgICBzdHJpbmdWYWx1ZTogdGhpcy5fYXBpLnVybCxcbiAgICB9KTtcbiAgICBjb25zb2xlLmxvZygnQVBJIFVybDogJyArIGFwaV91cmwuc3RyaW5nVmFsdWUpO1xuICAgIHJldHVybiB0aGlzLl9zdGFjaztcbiAgfVxufVxuIl19